"""Ïª§Ïä§ÌÖÄ ÏúÑÏ†Ø Î™®Îìà"""

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton,
    QTableWidget, QTableWidgetItem, QProgressBar, QGroupBox, QTextEdit,
    QHeaderView, QAbstractItemView, QFrame, QSplitter, QCheckBox, QComboBox
)
from PySide6.QtCore import Qt, Signal, QThread
from PySide6.QtGui import QFont, QDesktopServices, QPixmap, QIcon
from typing import List, Dict, Any, Optional
import logging
from datetime import datetime

from ..database.models import Video
from ..utils.helpers import FormatHelper
from .styles import DarkTheme, Typography

logger = logging.getLogger(__name__)


class StatusIndicator(QLabel):
    """ÏÉÅÌÉú ÌëúÏãú ÏúÑÏ†Ø"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("statusLabel")
        self.set_status("idle", "Ï§ÄÎπÑ")
    
    def set_status(self, status_type: str, message: str):
        """ÏÉÅÌÉú ÏÑ§Ï†ï
        
        Args:
            status_type: ÏÉÅÌÉú ÌÉÄÏûÖ (success, error, warning, info, idle)
            message: ÏÉÅÌÉú Î©îÏãúÏßÄ
        """
        self.setText(f"‚óè {message}")
        
        status_classes = {
            'success': 'successStatus',
            'error': 'errorStatus',
            'warning': 'warningStatus',
            'info': 'infoStatus',
            'idle': 'statusLabel'
        }
        
        # Í∏∞Ï°¥ ÌÅ¥ÎûòÏä§ Ï†úÍ±∞
        for class_name in status_classes.values():
            self.setProperty("class", "")
        
        # ÏÉà ÌÅ¥ÎûòÏä§ Ï†ÅÏö©
        self.setObjectName(status_classes.get(status_type, 'statusLabel'))
        self.style().polish(self)


class APIKeyWidget(QGroupBox):
    """API ÌÇ§ ÏûÖÎ†• ÏúÑÏ†Ø"""
    
    api_key_changed = Signal(str)
    api_key_deleted = Signal()
    
    def __init__(self, parent=None):
        super().__init__("YouTube API ÏÑ§Ï†ï", parent)
        self.setup_ui()
    
    def setup_ui(self):
        """UI ÏÑ§Ï†ï"""
        layout = QVBoxLayout(self)
        
        # API ÌÇ§ ÏûÖÎ†• ÏòÅÏó≠
        input_layout = QHBoxLayout()
        
        self.api_key_input = QLineEdit()
        self.api_key_input.setPlaceholderText("YouTube Data API v3 ÌÇ§Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî")
        self.api_key_input.setEchoMode(QLineEdit.EchoMode.Password)
        self.api_key_input.textChanged.connect(self.on_text_changed)
        
        self.save_button = QPushButton("Ï†ÄÏû•")
        self.save_button.clicked.connect(self.save_api_key)
        self.save_button.setEnabled(False)
        
        self.show_button = QPushButton("ÌëúÏãú")
        self.show_button.setObjectName("secondaryButton")
        self.show_button.clicked.connect(self.toggle_visibility)
        
        self.clear_button = QPushButton("ÏÇ≠Ï†ú")
        self.clear_button.setObjectName("dangerButton")
        self.clear_button.clicked.connect(self.clear_api_key)
        
        input_layout.addWidget(self.api_key_input)
        input_layout.addWidget(self.save_button)
        input_layout.addWidget(self.show_button)
        input_layout.addWidget(self.clear_button)
        
        # ÏÉÅÌÉú ÌëúÏãú
        self.status_indicator = StatusIndicator()
        
        # ÎèÑÏõÄÎßê
        help_label = QLabel(
            "API ÌÇ§ Î∞úÍ∏â: Google Cloud Console > API Î∞è ÏÑúÎπÑÏä§ > YouTube Data API v3"
        )
        help_label.setObjectName("captionLabel")
        help_label.setWordWrap(True)
        
        layout.addLayout(input_layout)
        layout.addWidget(self.status_indicator)
        layout.addWidget(help_label)
    
    def save_api_key(self):
        """API ÌÇ§ Ï†ÄÏû•"""
        api_key = self.api_key_input.text().strip()
        if api_key:
            self.api_key_changed.emit(api_key)
            self.save_button.setEnabled(False)
    
    def toggle_visibility(self):
        """API ÌÇ§ ÌëúÏãú/Ïà®ÍπÄ ÌÜ†Í∏Ä"""
        if self.api_key_input.echoMode() == QLineEdit.EchoMode.Password:
            self.api_key_input.setEchoMode(QLineEdit.EchoMode.Normal)
            self.show_button.setText("Ïà®ÍπÄ")
        else:
            self.api_key_input.setEchoMode(QLineEdit.EchoMode.Password)
            self.show_button.setText("ÌëúÏãú")
    
    def clear_api_key(self):
        """API ÌÇ§ ÏÇ≠Ï†ú"""
        self.api_key_input.clear()
        self.api_key_deleted.emit()
        self.set_status("idle", "API ÌÇ§Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§")
        
    def on_text_changed(self):
        """ÌÖçÏä§Ìä∏ Î≥ÄÍ≤ΩÏãú Ï†ÄÏû• Î≤ÑÌäº ÌôúÏÑ±Ìôî"""
        has_text = bool(self.api_key_input.text().strip())
        self.save_button.setEnabled(has_text)
        if has_text:
            self.set_status("idle", "ÏÉà API ÌÇ§ ÏûÖÎ†•Îê®")
    
    def set_api_key(self, api_key: str):
        """API ÌÇ§ ÏÑ§Ï†ï"""
        self.api_key_input.setText(api_key)
        self.save_button.setEnabled(False)
    
    def set_status(self, status_type: str, message: str):
        """ÏÉÅÌÉú ÏÑ§Ï†ï"""
        self.status_indicator.set_status(status_type, message)


class SearchWidget(QGroupBox):
    """Í≤ÄÏÉâ ÏúÑÏ†Ø"""
    
    search_requested = Signal(str)
    
    def __init__(self, parent=None):
        super().__init__("Í≤ÄÏÉâ ÏÑ§Ï†ï", parent)
        self.setup_ui()
    
    def setup_ui(self):
        """UI ÏÑ§Ï†ï"""
        layout = QVBoxLayout(self)
        
        # ÌÇ§ÏõåÎìú ÏûÖÎ†• ÏòÅÏó≠
        input_layout = QHBoxLayout()
        
        self.keyword_input = QLineEdit()
        self.keyword_input.setPlaceholderText("Í≤ÄÏÉâÌï† ÌÇ§ÏõåÎìúÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: ÌååÏù¥Ïç¨ Í∞ïÏùò)")
        self.keyword_input.returnPressed.connect(self.start_search)
        
        self.search_button = QPushButton("üîç Í≤ÄÏÉâ ÏãúÏûë")
        self.search_button.clicked.connect(self.start_search)
        
        input_layout.addWidget(self.keyword_input)
        input_layout.addWidget(self.search_button)
        
        # Í≤ÄÏÉâ Ï°∞Í±¥ ÌëúÏãú
        self.criteria_label = QLabel("Ï°∞Í±¥: Ï°∞ÌöåÏàò‚Üì | Íµ¨ÎèÖÏûê‚â§10K | 20Î∂Ñ+ | ÏµúÍ∑º 1Í∞úÏõî")
        self.criteria_label.setObjectName("captionLabel")
        
        # ÏßÑÌñâÎ•† Î∞î
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        
        layout.addLayout(input_layout)
        layout.addWidget(self.criteria_label)
        layout.addWidget(self.progress_bar)
    
    def start_search(self):
        """Í≤ÄÏÉâ ÏãúÏûë"""
        keyword = self.keyword_input.text().strip()
        if keyword:
            self.search_requested.emit(keyword)
    
    def set_progress(self, value: int):
        """ÏßÑÌñâÎ•† ÏÑ§Ï†ï"""
        self.progress_bar.setValue(value)
        
        if value > 0 and not self.progress_bar.isVisible():
            self.progress_bar.setVisible(True)
        elif value >= 100:
            self.progress_bar.setVisible(False)
    
    def set_search_enabled(self, enabled: bool):
        """Í≤ÄÏÉâ Î≤ÑÌäº ÌôúÏÑ±Ìôî/ÎπÑÌôúÏÑ±Ìôî"""
        self.search_button.setEnabled(enabled)
        self.keyword_input.setEnabled(enabled)
        
        if enabled:
            self.search_button.setText("üîç Í≤ÄÏÉâ ÏãúÏûë")
        else:
            self.search_button.setText("Í≤ÄÏÉâ Ï§ë...")


class VideoTableWidget(QTableWidget):
    """ÏòÅÏÉÅ Í≤∞Í≥º ÌÖåÏù¥Î∏î ÏúÑÏ†Ø"""
    
    video_selected = Signal(Video)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.videos = []
        self.setup_ui()
    
    def setup_ui(self):
        """UI ÏÑ§Ï†ï"""
        # Ïª¨Îüº ÏÑ§Ï†ï
        columns = ["ÏàúÏúÑ", "Ï†úÎ™©", "Ï±ÑÎÑêÎ™Ö", "Íµ¨ÎèÖÏûê", "Ï°∞ÌöåÏàò", "Í∏∏Ïù¥", "ÏóÖÎ°úÎìú", "URL"]
        self.setColumnCount(len(columns))
        self.setHorizontalHeaderLabels(columns)
        
        # ÌÖåÏù¥Î∏î ÏÑ§Ï†ï
        self.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
        self.setSelectionMode(QAbstractItemView.SelectionMode.SingleSelection)
        self.setAlternatingRowColors(True)
        self.setSortingEnabled(True)
        
        # Ïª¨Îüº ÌÅ¨Í∏∞ Ï°∞Ï†ï
        header = self.horizontalHeader()
        header.setStretchLastSection(True)
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Fixed)  # ÏàúÏúÑ
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)  # Ï†úÎ™©
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)  # Ï±ÑÎÑêÎ™Ö
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)  # Íµ¨ÎèÖÏûê
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.ResizeToContents)  # Ï°∞ÌöåÏàò
        header.setSectionResizeMode(5, QHeaderView.ResizeMode.ResizeToContents)  # Í∏∏Ïù¥
        header.setSectionResizeMode(6, QHeaderView.ResizeMode.ResizeToContents)  # ÏóÖÎ°úÎìú
        
        self.setColumnWidth(0, 50)  # ÏàúÏúÑ Ïª¨Îüº Í≥†Ï†ï ÎÑàÎπÑ
        
        # Ïù¥Î≤§Ìä∏ Ïó∞Í≤∞
        self.cellClicked.connect(self.on_cell_clicked)
        self.cellDoubleClicked.connect(self.on_cell_double_clicked)
    
    def update_videos(self, videos: List[Video]):
        """ÏòÅÏÉÅ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏"""
        self.videos = videos
        self.setRowCount(len(videos))
        
        for row, video in enumerate(videos):
            self.set_video_row(row, video, row + 1)
        
        # Ï≤´ Î≤àÏß∏ Ïª¨Îüº(ÏàúÏúÑ)Î°ú Ï†ïÎ†¨
        self.sortItems(0, Qt.SortOrder.AscendingOrder)
    
    def set_video_row(self, row: int, video: Video, rank: int):
        """ÌñâÏóê ÏòÅÏÉÅ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï"""
        items = [
            QTableWidgetItem(str(rank)),
            QTableWidgetItem(video.title[:50] + "..." if len(video.title) > 50 else video.title),
            QTableWidgetItem(video.channel_name),
            QTableWidgetItem(FormatHelper.format_number(video.subscriber_count)),
            QTableWidgetItem(FormatHelper.format_number(video.view_count)),
            QTableWidgetItem(video.duration_formatted),
            QTableWidgetItem(FormatHelper.format_date(video.upload_date, relative=False) if video.upload_date else ""),
            QTableWidgetItem("ÎßÅÌÅ¨")
        ]
        
        # Ïà´Ïûê Ï†ïÎ†¨ÏùÑ ÏúÑÌïú Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
        items[0].setData(Qt.ItemDataRole.UserRole, rank)
        items[3].setData(Qt.ItemDataRole.UserRole, video.subscriber_count)
        items[4].setData(Qt.ItemDataRole.UserRole, video.view_count)
        items[5].setData(Qt.ItemDataRole.UserRole, video.duration_seconds)
        if video.upload_date:
            items[6].setData(Qt.ItemDataRole.UserRole, video.upload_date.timestamp())
        
        # URL ÏïÑÏù¥ÌÖú Ïä§ÌÉÄÏùº ÏÑ§Ï†ï
        url_item = items[7]
        url_item.setForeground(DarkTheme.SECONDARY)
        
        # ÏïÑÏù¥ÌÖúÏùÑ ÌÖåÏù¥Î∏îÏóê Ï∂îÍ∞Ä
        for col, item in enumerate(items):
            item.setFlags(item.flags() & ~Qt.ItemFlag.ItemIsEditable)  # Ìé∏Ïßë Î∂àÍ∞Ä
            self.setItem(row, col, item)
    
    def on_cell_clicked(self, row: int, column: int):
        """ÏÖÄ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏"""
        if 0 <= row < len(self.videos):
            video = self.videos[row]
            
            # URL Ïª¨Îüº ÌÅ¥Î¶≠ Ïãú ÎßÅÌÅ¨ Ïó¥Í∏∞
            if column == 7:  # URL Ïª¨Îüº
                QDesktopServices.openUrl(video.video_url)
            
            self.video_selected.emit(video)
    
    def on_cell_double_clicked(self, row: int, column: int):
        """ÏÖÄ ÎçîÎ∏îÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏"""
        if 0 <= row < len(self.videos):
            video = self.videos[row]
            # ÏòÅÏÉÅ ÎßÅÌÅ¨ Ïó¥Í∏∞
            QDesktopServices.openUrl(video.video_url)
    
    def get_selected_video(self) -> Optional[Video]:
        """ÏÑ†ÌÉùÎêú ÏòÅÏÉÅ Î∞òÌôò"""
        current_row = self.currentRow()
        if 0 <= current_row < len(self.videos):
            return self.videos[current_row]
        return None


class ExportWidget(QGroupBox):
    """Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ ÏúÑÏ†Ø"""
    
    export_requested = Signal(str, bool)  # filename, include_stats
    
    def __init__(self, parent=None):
        super().__init__("Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞", parent)
        self.setup_ui()
    
    def setup_ui(self):
        """UI ÏÑ§Ï†ï"""
        layout = QVBoxLayout(self)
        
        # ÏòµÏÖò ÏòÅÏó≠
        options_layout = QHBoxLayout()
        
        self.include_stats_checkbox = QCheckBox("ÏÉÅÏÑ∏ ÌÜµÍ≥Ñ Ìè¨Ìï®")
        self.include_stats_checkbox.setChecked(True)
        
        options_layout.addWidget(self.include_stats_checkbox)
        options_layout.addStretch()
        
        # Î≤ÑÌäº ÏòÅÏó≠
        button_layout = QHBoxLayout()
        
        self.export_csv_button = QPushButton("üìä CSV ÎÇ¥Î≥¥ÎÇ¥Í∏∞")
        self.export_csv_button.clicked.connect(self.export_csv)
        
        self.export_summary_button = QPushButton("üìã ÏöîÏïΩ ÎÇ¥Î≥¥ÎÇ¥Í∏∞")
        self.export_summary_button.setObjectName("secondaryButton")
        self.export_summary_button.clicked.connect(self.export_summary)
        
        button_layout.addWidget(self.export_csv_button)
        button_layout.addWidget(self.export_summary_button)
        button_layout.addStretch()
        
        layout.addLayout(options_layout)
        layout.addLayout(button_layout)
    
    def export_csv(self):
        """CSV ÎÇ¥Î≥¥ÎÇ¥Í∏∞"""
        include_stats = self.include_stats_checkbox.isChecked()
        self.export_requested.emit("csv", include_stats)
    
    def export_summary(self):
        """ÏöîÏïΩ ÎÇ¥Î≥¥ÎÇ¥Í∏∞"""
        self.export_requested.emit("summary", False)
    
    def set_export_enabled(self, enabled: bool):
        """ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Î≤ÑÌäº ÌôúÏÑ±Ìôî/ÎπÑÌôúÏÑ±Ìôî"""
        self.export_csv_button.setEnabled(enabled)
        self.export_summary_button.setEnabled(enabled)


class StatsWidget(QGroupBox):
    """ÌÜµÍ≥Ñ Ï†ïÎ≥¥ ÏúÑÏ†Ø"""
    
    def __init__(self, parent=None):
        super().__init__("Í≤ÄÏÉâ ÌÜµÍ≥Ñ", parent)
        self.setup_ui()
    
    def setup_ui(self):
        """UI ÏÑ§Ï†ï"""
        layout = QVBoxLayout(self)
        
        self.stats_label = QLabel("Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.")
        self.stats_label.setObjectName("captionLabel")
        self.stats_label.setWordWrap(True)
        
        layout.addWidget(self.stats_label)
    
    def update_stats(self, videos: List[Video], keyword: str):
        """ÌÜµÍ≥Ñ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏"""
        if not videos:
            self.stats_label.setText("Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.")
            return
        
        total_videos = len(videos)
        total_views = sum(v.view_count for v in videos)
        avg_views = total_views // total_videos if total_videos > 0 else 0
        avg_subscribers = sum(v.subscriber_count for v in videos) // total_videos if total_videos > 0 else 0
        avg_duration = sum(v.duration_seconds for v in videos) // total_videos if total_videos > 0 else 0
        
        # ÏµúÍ≥† Ï°∞ÌöåÏàò ÏòÅÏÉÅ
        top_video = max(videos, key=lambda x: x.view_count) if videos else None
        
        stats_text = f"""
        <b>ÌÇ§ÏõåÎìú:</b> {keyword}<br>
        <b>Í≤∞Í≥º Ïàò:</b> {total_videos}Í∞ú<br>
        <b>ÌèâÍ∑† Ï°∞ÌöåÏàò:</b> {FormatHelper.format_number(avg_views)}<br>
        <b>ÌèâÍ∑† Íµ¨ÎèÖÏûê:</b> {FormatHelper.format_number(avg_subscribers)}<br>
        <b>ÌèâÍ∑† Í∏∏Ïù¥:</b> {FormatHelper.format_duration(avg_duration)}<br>
        """
        
        if top_video:
            stats_text += f"<b>ÏµúÍ≥† Ï°∞ÌöåÏàò:</b> {FormatHelper.format_number(top_video.view_count)} ({top_video.channel_name})"
        
        self.stats_label.setText(stats_text)


class LogWidget(QTextEdit):
    """Î°úÍ∑∏ ÌëúÏãú ÏúÑÏ†Ø"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setMaximumHeight(150)
        self.setReadOnly(True)
        self.setPlaceholderText("ÏûëÏóÖ Î°úÍ∑∏Í∞Ä Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§...")
    
    def add_log(self, message: str, level: str = "INFO"):
        """Î°úÍ∑∏ Î©îÏãúÏßÄ Ï∂îÍ∞Ä"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # Î°úÍ∑∏ Î†àÎ≤®Ïóê Îî∞Î•∏ ÏÉâÏÉÅ ÏÑ§Ï†ï
        colors = {
            "DEBUG": DarkTheme.TEXT_SECONDARY,
            "INFO": DarkTheme.TEXT_PRIMARY,
            "WARNING": DarkTheme.WARNING,
            "ERROR": DarkTheme.ERROR,
            "SUCCESS": DarkTheme.SUCCESS
        }
        
        color = colors.get(level, DarkTheme.TEXT_PRIMARY)
        log_entry = f'<span style="color: {color};">[{timestamp}] {level}: {message}</span><br>'
        
        self.insertHtml(log_entry)
        
        # ÏûêÎèô Ïä§ÌÅ¨Î°§
        scrollbar = self.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
    
    def clear_logs(self):
        """Î°úÍ∑∏ ÏßÄÏö∞Í∏∞"""
        self.clear()